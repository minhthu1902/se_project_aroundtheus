!function(){"use strict";class e{constructor(e,t,r,s,o){let{name:i,link:n,_id:a,isLiked:l}=e;this._name=i,this._link=n,this._id=a,this._isLiked=l,this._handleImagePreview=r,this._cardSelector=t,this._handleDeleteClick=s,this._handleLikeClick=o}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}updateLikes(e){this._isLiked=!e,this._handleLikeIcon()}_handleLikeIcon(){this._isLiked?this._likeButton.classList.add("card__like-button-active"):this._likeButton.classList.remove("card__like-button-active")}handleDeleteCard(){return this._cardElement.remove(),this._cardElement=null,this._cardElement}_renderCard(){this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImagePreview({name:this._name,link:this._link})}))}getNewCard(){return this._cardElement=this._getTemplate(),this._cardElement.dataset.id=this._id,this._cardElement.dataset.id=this._id,this._cardTitle=this._cardElement.querySelector(".card__title"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._handleLikeIcon(),this._cardImage=this._cardElement.querySelector(".card__image"),this._trashButton=this._cardElement.querySelector(".card__delete-button"),this._renderCard(),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formElement=e,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this.inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._ButtonElement=this._formElement.querySelector(this._submitButtonSelector)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e,t){const r=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButtons=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}toggleButtonState(){if(this._hasInvalidInput())return this._submitButtons.classList.add(this._inactiveButtonClass),void(this._submitButtons.disabled=!0);this._submitButtons.classList.remove(this._inactiveButtonClass),this._submitButtons.disabled=!1}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{e.value="",this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e){let{modalSelector:t}=e;console.log(this._popupElement),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){console.log(this),this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){e.preventDefault(),"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target===this._popupElement||e.target.classList.contains("modal__close"))&&this.close()}))}}class s extends r{constructor(e,t){super({modalSelector:e}),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._form.querySelectorAll(".modal__input"),this._modalButton=this._popupElement.querySelector(".modal__button")}close(){this._form.reset(),super.close()}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setSubmit(){this._formSubmit=handleFormSubmit}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._modalButton?this._modalButton.textContent=e?t:this._modalButton.dataset.originalText||"Save":console.error("Submit button not found.")}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())})),super.setEventListeners()}}document.querySelector(".cards__list");const o=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button"),n=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-description-input"),l=document.querySelector("#profile-edit-modal"),c=(l.querySelector(".modal__close"),l.querySelector(".modal__form"),document.querySelector("#add-card-form")),d=(document.querySelector(".modal__close"),document.querySelector("#preview-image"),document.querySelector("#preview-title"),document.querySelector("#preview-modal-close-button"),document.querySelector("#card-template").content.querySelector(".card"),document.querySelector("#edit-profile-form")),h=document.querySelector(".profile__image-edit-button"),u=document.querySelector("#avatar-modal").querySelector("#avatar-modal-form"),_=(document.querySelector(".card__delete-button"),document.querySelector("#delete-modal-form"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),m=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseUrl=t,this._headers=r}async getProfile(){return fetch(this._baseUrl+"/users/me/",{method:"GET",headers:{authorization:this._headers.authorization}}).then((e=>e.ok?e.json():(console.log("Error"),Promise.reject(`Error : ${e.status}`)))).then((e=>(console.log(e),e))).catch((e=>console.error(e)))}async patchProfileAvatar(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status} + ${e.message}`))).then((e=>e)).catch((e=>{console.error(e)}))}async patchProfile(e,t){return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}async getInitialCards(){return fetch(this._baseUrl+"/cards",{method:"GET",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error getting initial cards: ${e.status}`)))}async postCards(e,t){return console.log("Sending data:",{name:e,link:t}),fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"},body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>(console.log("Card created successfully:",e),e))).catch((e=>{console.error("POST Card Error:",e)}))}async deleteCard(e){return fetch(this._baseUrl+`/cards/${e}`,{method:"DELETE",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"}}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).then((e=>{console.log(e)}))}async cardLikeStatus(e,t){try{const r=await fetch(`${this._baseUrl}/cards/${e}/likes`,{method:t?"DELETE":"PUT",headers:{authorization:this._headers.authorization,"Content-Type":"application/json"}});if(!r.ok)throw new Error(`HTTP Error: ${r.status}`);return r.json()}catch(e){throw console.error(`Failed to update like status: ${e.message}`),e}}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"a93eae64-e670-4bc7-86e7-6fe2158b62a7"}});m.getInitialCards().then((e=>{S.renderItems(e)})).catch((e=>{console.error("Error fetching cards:",e)})),m.getProfile().then((e=>{console.log("Profile data fetched:",e),p.setUserInfo(e.name,e.about),p.setUserAvatar(e.avatar)})).catch((e=>console.error("Error fetching profile:",e)));const p=new class{constructor(e){let{profileTitleSelector:t,profileDescriptionSelector:r,profileAvatarSelector:s}=e;this._profileTitleElement=document.querySelector(t),this._profileDescriptionElement=document.querySelector(r),this._profileAvatarElement=document.querySelector(s)}getUserInfo(){return{profileTitle:this._profileTitleElement.textContent,profileDescription:this._profileDescriptionElement.textContent,avatar:this._profileAvatarElement.src}}setUserInfo(e,t){this._profileTitleElement.textContent=e,this._profileDescriptionElement.textContent=t}setUserAvatar(e){this._profileAvatarElement&&(this._profileAvatarElement.src=e)}}({profileTitleSelector:".profile__title",profileDescriptionSelector:".profile__description",profileAvatarSelector:".profile__image"}),E=new s("#add-card-modal",(function(e){let{name:t,url:r}=e;E.setLoading(!0,"Saving..."),m.postCards(t,r).then((e=>{const t=k(e);S.addItem(t),E.close()})).finally((()=>{E.setLoading(!1)})).catch((e=>{console.error(e)}))}));E.setEventListeners();const f=new s("#profile-edit-modal",(function(e){let{name:t,description:r}=e;f.setLoading(!0,"Saving..."),m.patchProfile(t,r).then((e=>{console.log(e),p.setUserInfo(e.name,e.about),f.close()})).finally((()=>{f.setLoading(!1)})).catch((e=>{console.error(e)}))}));f.setEventListeners();const S=new class{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach(this._renderer)}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>{const t=k(e);S.addItem(t)}},".cards__list"),v=new s("#avatar-modal",(function(e){let{avatarUrl:t}=e;console.log(t),v.setLoading(!0,"Saving..."),m.patchProfileAvatar(t).then((e=>{p.setUserAvatar(e.avatar),v.close()})).finally((()=>{v.setLoading(!1)})).catch((e=>{console.error(e)}))}));v.setEventListeners();const y=new class extends r{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._photoElement=this._popupElement.querySelector(".modal__preview-image"),this._title=this._popupElement.querySelector(".modal__preview-title")}open(e,t){this._photoElement.src=t,this._photoElement.alt=e,this._title.textContent=e,super.open()}}({modalSelector:"#preview-image-modal"});y.setEventListeners();const g=new class extends r{constructor(e,t){super({modalSelector:e}),this._form=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._modalButton=this._form.querySelector(".modal__button")}_removeCard(e){e.remove(),e=null}setSubmit(e){this._handleFormSubmit=e}setLoading(e,t){this._modalButton.textContent=e?"Deleting...":t}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()}))}}("#delete-modal",B);g.setEventListeners();const L=new t(c,_),b=new t(u,_),C=new t(d,_);function k(t){return new e(t,"#card-template",I,B,q).getNewCard()}function q(e){m.cardLikeStatus(e._id,e._isLiked).then((()=>{e.updateLikes(e._isLiked)})).catch((t=>{console.error("Failed to update card likes status",t),e.updateLikes(e._isLiked)}))}function I(e){y.open(e.name,e.link)}function B(e){g.open(),g.setSubmit((()=>{g.setLoading(!0,"Deleting..."),this._cardElement.dataset.id=this._id,m.deleteCard(e._id).then((()=>{console.log("Card deleted successfully"),e.handleDeleteCard(),g.close()})).catch((e=>{console.error(e)})).finally((()=>{g.setLoading(!1,"Yes")}))}))}C.enableValidation(),L.enableValidation(),b.enableValidation(),o.addEventListener("click",(()=>{const e=p.getUserInfo();C.resetValidation(),n.value=e.profileTitle,a.value=e.profileDescription,f.open()})),i.addEventListener("click",(()=>{L.toggleButtonState(),E.open()})),h.addEventListener("click",(()=>{v.open(),b.toggleButtonState()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,